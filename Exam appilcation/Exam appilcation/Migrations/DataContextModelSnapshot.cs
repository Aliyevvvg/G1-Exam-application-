// <auto-generated />
using System;
using Exam_appilcation.Service;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Exam_appilcation.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ExamBot")
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Exam_appilcation.Models.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsPremium")
                        .HasColumnType("boolean")
                        .HasColumnName("is_premium");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nickname");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Client", "ExamBot");
                });

            modelBuilder.Entity("Exam_appilcation.Models.Exam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_datatime");

                    b.Property<string>("ExamName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("exam_name");

                    b.Property<long>("Examiner_id")
                        .HasColumnType("bigint")
                        .HasColumnName("examiner");

                    b.Property<string>("FileId")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDataTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_datatime");

                    b.HasKey("Id");

                    b.HasIndex("Examiner_id")
                        .IsUnique();

                    b.HasIndex("FileId");

                    b.ToTable("Exams", "ExamBot");
                });

            modelBuilder.Entity("Exam_appilcation.Models.Examiner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ExamId")
                        .HasColumnType("bigint")
                        .HasColumnName("exam_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("Examiners", "ExamBot");
                });

            modelBuilder.Entity("Exam_appilcation.Models.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("Exam_id")
                        .HasColumnType("bigint")
                        .HasColumnName("exam_id");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<long>("Telgram_Chat_Id")
                        .HasColumnType("bigint")
                        .HasColumnName("telegram_chat_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("Exam_id");

                    b.ToTable("Students", "ExamBot");
                });

            modelBuilder.Entity("Exam_appilcation.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Phone_number")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<long>("Telgram_Chat_Id")
                        .HasColumnType("bigint")
                        .HasColumnName("telgram_chat_id");

                    b.HasKey("Id");

                    b.ToTable("Users", "ExamBot");
                });

            modelBuilder.Entity("Telegram.Bot.Types.File", b =>
                {
                    b.Property<string>("FileId")
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<long?>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileUniqueId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("FileId");

                    b.ToTable("File", "ExamBot");
                });

            modelBuilder.Entity("Exam_appilcation.Models.Client", b =>
                {
                    b.HasOne("Exam_appilcation.Models.User", "User")
                        .WithOne("Client")
                        .HasForeignKey("Exam_appilcation.Models.Client", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Exam_appilcation.Models.Exam", b =>
                {
                    b.HasOne("Exam_appilcation.Models.Examiner", "Examiner")
                        .WithOne("Exam")
                        .HasForeignKey("Exam_appilcation.Models.Exam", "Examiner_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Telegram.Bot.Types.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.Navigation("Examiner");

                    b.Navigation("File");
                });

            modelBuilder.Entity("Exam_appilcation.Models.Student", b =>
                {
                    b.HasOne("Exam_appilcation.Models.Exam", "Exam")
                        .WithMany("Students")
                        .HasForeignKey("Exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("Exam_appilcation.Models.User", b =>
                {
                    b.HasOne("Exam_appilcation.Models.Student", "Student")
                        .WithOne("User_")
                        .HasForeignKey("Exam_appilcation.Models.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Exam_appilcation.Models.Exam", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Exam_appilcation.Models.Examiner", b =>
                {
                    b.Navigation("Exam")
                        .IsRequired();
                });

            modelBuilder.Entity("Exam_appilcation.Models.Student", b =>
                {
                    b.Navigation("User_")
                        .IsRequired();
                });

            modelBuilder.Entity("Exam_appilcation.Models.User", b =>
                {
                    b.Navigation("Client")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
